/*
void pbsgEventHandler (Event e) {
  // Process events for child VSWs.
  //   - After initialize() identifies 'state.activeVswDNI' and calls
  //     parent.pbsgVswTurnedOnCallback(), this method becomes authoritative
  //     for 'state.activeVswDNI' and parent.pbsgVswTurnedOnCallback()
  //     invocation.
  // - The state.previousVswDNI is preserved for reactivation
  //   when MANUAL_OVERRIDE turns off.
  if (e.isStateChange) {
    if (e.value == 'on') {
      turnOffPeers(e.displayName)
      state.previousVswDNI = state.activeVswDNI ?: state.defaultVswDNI
      state.activeVswDNI = e.displayName
      Ldebug(
        'pbsgEventHandler()',
        "${state.previousVswDNI} -> ${state.activeVswDNI}"
      )
      parent.pbsgVswTurnedOnCallback(state.activeVswDNI)
    } else if (e.value == 'off') {
      if (e.displayName.contains('MANUAL_OVERRIDE')) {
        // Special behavior for MANUAL ENTRY: Restore previously switch.
        state.activeVswDNI = state.previousVswDNI ?: state.defaultVswDNI
        turnOnVsw(state.previousVswDNI)
      } else {
        enforceDefaultSwitch()
      }
    } else {
      Lwarn(
        'pbsgEventHandler()',
        "unexpected event value = >${e.value}<"
      )
    }
  }
}

void initPbsg () {
  // Abstract
  //   Identify 'state.activeVswDNI', call parent.pbsgVswTurnedOnCallback(),
  //   then hand control over to pbsgEventHandler() to process VSW events.
  Ltrace('initialize()', 'At entry')
  manageChildDevices()
  app.getAllChildDevices().each{ device ->
    Ltrace(
      'initialize()',
      "subscribing ${getDeviceInfo(device)}..."
    )
    subscribe(device, "switch", pbsgEventHandler, ['filterEvents': false])
  }
  enforceMutualExclusion()
  enforceDefaultSwitch()
  state.roomScene = state.currScenePerVsw
  //-> enforcePbsgConstraints()
}
*/
