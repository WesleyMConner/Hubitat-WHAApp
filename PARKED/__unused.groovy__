Map<String, ArrayList> compareLists(ArrayList existing, ArrayList revised) {
  // Produces Button Lists for Map keys 'retained', 'dropped' and 'added'.
  Map<String, ArrayList> map = [:]
  if (!existing) {
    map.added = revised.collect()
  } else if (!revised) {
    map.retained = existing.collect()
  } else {
    map.retained = existing.collect()
    map.retained.retainAll(revised)
    map.dropped = existing.collect()
    map.dropped.removeAll(revised)
    map.added = revised.collect()
    map.added.removeAll(existing)
  }
  return map
}

String showSwitchAndState(String name, String state) {
  String adjustedState = state ?: 'unk'
  String emphasizedState = state == 'on' ? "${b(adjustedState)}" : "<i>${adjustedState}</i>"
  return "→ ${emphasizedState} - ${name}"
}

void pruneAppDups(ArrayList keepLabels, InstAppW appBase) {
  // if keepLatest is false, it implies "Keep Oldest"
  ArrayList result = []
  result += '<table>'
  result += '<tr><th><u>LABEL</u></th><th><u>ID</u></th><th><u>DEVICES</u></th><th><u>ACTION</u></th></tr>'
  appBase.getAllChildApps()
    ?.groupBy { String appLabel -> appLabel.label }
    .each { label, apps ->
      Boolean isOrphan = keepLabels.findIndexOf { String appLabel -> appLabel == label } == -1
      apps.eachWithIndex { a, index ->
        Boolean isDup = index > 0
        if (isOrphan) {
          isWarning = true
          result += "<tr>${tdC(label)}${tdC(a.id)}${tdC(a.getChildDevices().size())}"
            + "${tdC('DELETED ORPHAN', 'font-weight: bold;')}</tr>"
          appBase.deleteChildApp(a.id)
        } else if (isDup) {
          isWarning = true
          result += """<tr>
            ${tdC(label)}${tdC(a.id)}${tdC(a.getChildDevices().size())}
            ${tdC('DELETED DUPLICATE', 'font-weight: bold;')}
          </tr>""".stripMargin().stripIndent()
          appBase.deleteChildApp(a.id)
        } else {
          result += "<tr>${tdC(label)}${tdC(a.id)}${tdC(a.getChildDevices().size())}${tdC('Kept')}</tr>"
        }
      }
    }
  result += '</table>'
}

void removeChildApps() {
  getAllChildApps().each { child ->
    logDebug(
      'removeChildApps',
      "deleting child: ${b(appInfo(appObj))}"
    )
    deleteChildApp(child.id)
  }
}

ArrayList appStateAsBullets(Boolean includeHeading = false) {
  ArrayList result = []
  if (includeHeading) { result += h2("${appInfo(app)} STATE") }
  state.sort().each { k, v ->
    result += bullet2("<b>${k}</b> → ${v}")
  }
  return result.size() == 0 ? [ h2('NO STATE DATA AVAILABLE') ] : result
}

ArrayList appSettingsAsBullets(Boolean includeHeading = false) {
  ArrayList result = []
  if (includeHeading) { result += h2("${appInfo(app)} SETTINGS") }
  settings.sort().each { k, v ->
    result += bullet1("<b>${k}</b> → ${v}")
  }
  return result.size() == 0 ? [ h2('<i>NO SETTINGS DATA AVAILABLE</i>') ] : result
}

String deviceInfo(def device) {
  // Design Note:
  //   - The parameter is passed as 'def' in lieu of 'DevW'.
  //   - When devices are used from a LinkedHashMap (e.g., settings, state),
  //     the original DevW type is lost - resulting in method call fail that
  //     reports a type mismatch.
  return device ? "${device.displayName} (${device.id})" : null
}

